Aula 1: Welcome
	* What separates this course from the others?
		# TDD - Test Driven Development

Aula 2: Intro to the course
	* We are gonna build a virtual box of recipes application.

	* Features:
		# User authentication
		# Creating objects
		# Listing/filtering
		# Upload of images

Aula 3: Course structure
	* OK

Aula 4: How to get the most out of this course
	* Commitment from the beggining to the end
	* Code as you go
	* Help other people

Aula 5: How to get help
	* OK

Aula 6: OK

Aula 7: Python
	* Python: Main programming language
		# Version 3.7
		# Application logic and tests
		# PEP-8
		# Automated code linting

Aula 8: Django
	* Django:
		# Python web framework
		# Build web apps rapidly
		# ORM
		# Django Admin

Aula 9: Django Rest Framework
	* Django Rest Framework:
		# Extension to Django Framework
		# Built in authentication
		# Viewsets
			> Will be used to create the structure of our API and provide all of the endpoints for managing objects
		# Serializers
			> Will be used to provide validation on all requests to our API and to help to convert JSON to Django Database models
		# Browsable API

Aula 10: Docker
	* Docker: A virtualization tool
		# Isolate project dependencies
		# Lightweight virtual machine
		# Single image
		# Consistent dev environment
		# Deploy to cloud platform

Aula 11: Travis-CI
	* Travis-CI: Kinda of a DevOps
		# Automate testing and linting
		# Email notification if build breaks
		# Identify issues early

Aula 12: Postgres
	* Postgres: OpenSource Database

Aula 13: What is test driven development?
	* Very important!!
	* Unit tests:
		# Checks that your code works correctly
		# Isolate specific code
			-> Functions
			-> Class
			-> API endpoints
	* Test stages:
		# Three stages:
			-> Setup: Create sample database objects
			-> Execution: Call the code
			-> Assertions: Confirm expected output

	* Why write tests?
		# Expected in most professional dev teams
		# Makes it easier to change the code
		# Saves time!
		# Testable, better quality code

	* TDD Methods:
		# Traditional development:
			Implement feature -> Write tests

		# TDD (Test Driven Development):
			Write tests -> Implement feature

		# Why use TDD?
			-> Increases test coverage
			-> Ensure tests work
			-> Encourages quality code
			-> Stay focused

Aula 14: System setup
	* OK

Aula 15: Windows 10 Home Workaround
	* OK

Aula 16: Setup new GitHub project
	* OK

Aula 17: Add Dockerfile
	* Dockerfile it's just a file that contains a list of instructions for Docker to build the Docker image.
	* It's needed to describe all the dependencies that you need for your project in the Dockerfile.
	* The file needs to begin with a capital D -> Dockerfile
	* It's possible to use an image to be the base of another image, so you just add what you need on top of it.
	* List of available images: https://hub.docker.com

	Steps:
		# Create a file named by "Dockerfile":
			-> This file contains all the instructions to docker build the image.
		# Create a file named by "requirements.txt":
			-> This file contains all the libraries that Docker will read and build the image with then.
		# Run the comand: "docker build ."

Aula 18: Configure Docker Compose
	* Docker Compose it's a file configuration that helps to run the Docker image from the project location.
	* The file contains all of the services that make up the project.

	Steps:
		# Create a file named by "docker-compose.yml"
			-> This file contains the libraries used in the project and all the services that make up the project.
		# Run the command: "docker-compose build"

Aula 19: Create Django project
	* Creating a Django project using the Docker configuration setted before. To do that, it's necessary to run a command from the Docker container:
		# "docker-compose run app sh -c "django-admin.py startproject app .""

Aula 20: Enable CircleCI for project
	* CircleCI it's tool that allow us to automate some of the tests of our project.
	
	Steps:
		# Access CircleCI website (https://app.circleci.com/)
		# Enable it on the repository
		# Create the file config.yml inside of the folder .circleci

	** Travis-CI is descontinued and configuring CircleCI was kinda different.

Aula 24: Writing a simple unit test
	* The Django looks for files that the name begins with "tests" and uses them to run unit tests.

	* Steps to build a unit test file:
		# Import the Django Unit Test library:
			- from django.test import TestCase

		# Import the functions that you are gonna test:
			- from app.calc import add

		# Create a class to create the function tests inside of it
			- In this case we created the CalcTests(TestCase)
			* It's important to remember to extends the TestCase class!

		# Create your function/functions inside of the class and assert the output expected
			- Example:
				from django.test import TestCase
				from app.calc import add

				class CalcTests(TestCase):
				    def test_add_numbers(self):
				        """Testing that two number were added together correctly"""
				        self.assertEqual(add(3, 8), 11)

		# Run your test with the following command:
			- docker-compose run app sh -c "python manage.py test"

Aula 25: Writing a unit test with TDD
	* TDD consists in writing the tests before writing the code.
	* Then, write the test and after that write the code, like the subtraction function.

Aula 26: Create core app
	* The intention of the core app is to create a app to be the base of the rest of the sub apps that we create in our system.
	* Anything that is shared in one or more apps, like migrations etc.

	* Steps:
		- Create the app: docker-compose run app sh -c "python manage.py startapp core"
		- Exclude the tests.py file from the app created and create a folder named tests.
		- Exclude the views.py file because it won't be used in the core app.
		- Create a file named __init__.py inside of the tests folder.

Aula 27: Add tests for custom user model
	* Import the library test: from django.test import TestCase
	# In this case we are gonna be testing the Custom User Model
	* Create the class to test the Model extending the TestCase class: class ModelTests(TestCase):
	* Create the function to teste what you want and assert it to the expected output.

Aula 28: Implement custom user model
	* After implementing the test, we are gonna create out Custom User Model
	from django.db import models
	from django.contrib.auth.models import (
	    AbstractBaseUser,
	    BaseUserManager,
	    PermissionsMixin,
	)


	class UserManager(BaseUserManager):
	    def create_user(self, email, password=None, **extra_fields):
	        """Creates and saves a new user"""
	        user = self.model(email=email, **extra_fields)
	        user.set_password(password)
	        user.save(using=self._db)

	        return user


	class User(AbstractBaseUser, PermissionsMixin):
	    """Custom user model that supports user email instead of username"""

	    email = models.EmailField(max_length=255, unique=True)
	    name = models.CharField(max_length=255)
	    is_active = models.BooleanField(default=True)
	    is_staff = models.BooleanField(default=False)

	    objects = UserManager()

	    USERNAME_FIELD = "email"

Aula 29: Normalize email addresses
	* Just created a test that assert the email after user creation is normalized to lower case.
	* Normalized the email inside of the models.

Aula 30: Add validation for email field
	* Just created a test that asserts a ValueError when there is no e-mail for the user
	* Verified in the models.

Aula 31: Add support for creating superusers
	* Created a test that asserts the superuser created have is_staff and is_superuser as True.
	* Used the existing function to create users and setted is_staff and is_superuser as True.

Aula 32: Add tests for listing users in Django admin
	* Created a class to test the Admin site, called AdminSiteTest(TestCase):
	* It was necessary to use the following libraries:
		- from django.test import TestCase, Client
		- from django.contrib.auth import get_user_model
		- from django.urls import reverse
	* We needed to create a setUp function, that contains two users, a normal one and a superuser one.
	* After, we created a class to test the listing of users on the Django panel:
		def test_users_listed(self):
	        """Test that users are listed on user page"""
	        # reverse("<app name>:<url>") -> These url's are defined by Django
	        url = reverse("admin:core_user_changelist")
	        res = self.client.get(url)

	        self.assertContains(res, self.user.name)
	        self.assertContains(res, self.user.email)
	* Obs:
		# We created a Client to make requests to our server, like self.client = Client()
		# In this class we logged in the users, using "self.client.force_login(self.user)"

Aula 33: Modify Django admin to list our custom user model
	* We have created the class to list the users on the Django panel:
		@admin.register(models.User)
		class UserAdmin(BaseUserAdmin):
		    ordering = ["id"]
		    list_display = ["email", "name"]

		# Obs: It's important to registrate the class on the Django.

Aula 34: Modify Django admin to support changing user model
	* We created two tests that asserts the user edit and user create pages works fine.
		# Asserting that the response has the status_code 200
	* Added to the admin the fields so adming can support the custom user model.

Aula 36: Add postgres to docker compose
	* Included the database configuration in the file docker-compose.yml.
	* Added an special configuration, called depends_on: , that set the service to depend on another services, in this case we have used the app to starts after the database.

Aula 37: Add postgres support to Dockerfile
	* Created a temporary build before installing the dependencies (requirements.txt), this makes Docker to support the dep installing.
	* It's important to use the --no-cache option, to make sure the application isn't storing unecessary things and making it vulnerable.

Aula 38: Configure database in Django
	* Changed the database settings inside of the settings.py of the project.
	* It's important to use the environment paths to set the database parameters. Example:
		DATABASES = {
		    "default": {
		        "ENGINE": "django.db.backends.postgresql",
		        "HOST": os.environ.get("DB_HOST"),
		        "NAME": os.environ.get("DB_NAME"),
		        "user": os.environ.get("DB_USER"),
		        "PASSWORD": os.environ.get("DB_PASS"),
		    }
		}

Aula 39: Mocking with unittests
	* Mocking:
		# It's when you override or change behaviour of dependecies.
		# Can isolate specific parte of the code

	* When writing unit tests:
		# You should never depend on external services
			# Because:
				- Can't guarantee they will be available
				- Make tests unpredictable and unreliable
		# Example:
			You can override the function that send e-mail to test without sending e-mail for each test

Aula 40: Add tests for wait_for_db command
	* This is an important thing because, there is a possibility to the postgres doenst make up well, so the app will try to connect with the databse and there's gonna be an error.

	* We created a test that returns when the db is available and another that tests the waiting when the db is available

Aula 41: Add wait_for_db command
	* It's necessary to create a file to test the commands.
		# It's convencional to create a folder named by management and put all of the commands inside of it
		# It's also needed to create a __init__.py file, so the folder will be recognized as a python module
		# Inside of each folder of the management folder, it's also necessary to add the __init__ file

	* Created a Command class that basically waits the connection untill it get ready.

Aula 42: Make docker compose wait for db:
	* Just changed the command on docker-compose to run the migrations and also the command created.
		# sh -c "python manage.py wait_for_db &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000"

Aula 43: Test in browser
	* Just created a super user from docker-compose run app and tried it on the browser

Aula 44: Mocking:
	* Ok

Aula 45: Create users app
	* The is an argument "--rm" that you can use on your docker commands, it removes the container after running it. This is good to commands that you just want to run once and don't want the docker to linger on the system.
	* Just created the app using the argument above.
	* Some steps to do after creating a new app:
		- Remove the migrations folder: It will be tracked only in the core app
		- Remove the models file: We are gonna keep it on the core app
		- Remove the admin file: Same
		- Remove the tests file and create a subfolder on the app to create the tests
			# Create an file named by "__init__.py" so python can identify the folder tests as a module.

Aula 46: Add tests for create user API
	* Created a class named PublicUserApiTests, that test the public users API.
	* Created a setUp that only contains a client: self.client = APIClient() -> This rest framewok request library.
	* Created a test that test a successful user creation.
		# Used the library status from rest framework to asser the status HTTP_201_CREATED
	* Created a test that ensure that it's not possible to create a user that already exists
	* Created a test that ensure that it's not possible to create a user with a password with less than 5 characters

Aula 47: Add create user API
	* Created a file named "serializer.py" inside of the app and created a class that inherits the ModelSerializer from rest_framework:
		class UserSerializer(serializers.ModelSerializer):
		    """Serializer for the users object"""

		    class Meta:
		        model = get_user_model()
		        fields = ("email", "password", "name")
		        extra_kwargs = {"password": {"write_only": True, "min_length": 5}}

		    def create(self, validated_data):
		        """Create a new user with encrypted password and return it"""
		        return get_user_model().objects.create_user(**validated_data)

	* Inside of the view of the app just imported the generics from rest_framework and the Serializer, after that created a class very simple:
		class CreateUserView(generics.CreateAPIView):
		    """Create a new user in the system"""
		    serializer_class = UserSerializer

	* After that we created the urls file inside of the app and imported it on the project urls.

Aula 49: Add tests for creating a new token
	* Just created a few tests about user token creation.

Aula 50: Add create token API
	* Created the serializer, view and added the URL

Aula 51: 