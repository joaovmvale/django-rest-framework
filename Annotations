Aula 1: Welcomo
	* What separates this course from the others?
		# TDD - Test Driver Development

Aula 2: Intro to the course
	* We are gonna build a virtual box of recipes application.

	* Features:
		# User authentication
		# Creating objects
		# Listing/filtering
		# Upload of images

Aula 3: Course structure
	* OK

Aula 4: How to get the most out of this course
	* Commitment from the beggining to the end
	* Code as you go
	* Help other people

Aula 5: How to get help
	* Ok

Aula 6: OK

Aula 7: Python
	* Python: Main programming language
		# Version 3.7
		# Application logic and tests
		# PEP-8
		# Automated code linting

Aula 8: Django
	* Django:
		# Python web framework
		# Build web apps rapidly
		# ORM
		# Django Admin

Aula 9: Django Rest Framework
	* Django Rest Framework:
		# Extension to Django Framework
		# Built in authentication
		# Viewsets
			> Will be used to create the structure of our API and provide all of the endpoints for managing objects
		# Serializers
			> Will be used to provide validation on all requests to our API and to help convert JSON to Django Database models
		# Browsable API

Aula 10: Docker
	* Docker: A virtualization tool
		# Isolate project dependencies
		# Lightweight virtual machine
		# Single image
		# Consistent dev environment
		# Deploy to cloud platform

Aula 11: Travis-CI
	* Travis-CI: Kinda of a DevOps
		# Automate testing and linting
		# Email notification if build breaks
		# Identify issues early

Aula 12: Postgres
	* Postgres: OpenSource Database

Aula 13: What is test driven development?
	* Very important!!
	* Unit tests:
		# Checks that your code works
		# Isolate specific code
			-> Functions
			-> Class
			-> API endpoints
	* Test stages:
		# Three stages:
			-> Setup: Create sample database objects
			-> Execution: Call the code
			-> Assertions: Confirm expected output

	* Why write tests?
		# Expected in most professional dev teams
		# Makes it easier to change code
		# Saves time!
		# Testable, better quality code

	* TDD Methods:
		# Traditional development:
			Implement feature -> Write tests

		# TDD (Test Driver Development):
			Write tests -> Implement feature

		# Why use TDD?
			-> Increases test coverage
			-> Ensure tests work
			-> Encourages quality code
			-> Stay focused

Aula 14: System setup
	* OK

Aula 15: Windows 10 Home Workaround
	* OK

Aula 16: Setup new GitHub project
	* OK

Aula 17: Add Dockerfile
	* Dockerfile it's just a file that contains a list of instructions for Docker to build the Docker image.
	* It's needed to describe all the dependencies that you need for your project in the Dockerfile.
	* The file needs to begin with a capital D -> Dockerfile
	* It's possible to use an image to be the base of another image, so you just add what you need on top of it.
	* List of available images: https://hub.docker.com

	Steps:
		# Create a file named by "Dockerfile":
			-> This file contains all the instructions to docker build the image.
		# Create a file named by "requirements.txt":
			-> This file contains all the libraries that Docker will read and build the image with then.
		# Run the comand: "docker build ."

Aula 18: Configure Docker Compose
	* Docker Compose it's a file configuration that helps to run the Docker image from the project location.
	* The file contains all of the services that make up the project.

	Steps:
		# Create a file named by "docker-compose.yml"
			-> This file contains the libraries used in the project and all the services that make up the project.
		# Run the command: "docker-compose build"

Aula 19: Create Django project
	* Creating a Django project using the Docker configuration setted before. To do that, it's necessary to run a command from the Docker container:
		# "docker-compose run app sh -c "django-admin.py startproject app .""

Aula 20: Enable CircleCI for project
	* CircleCI it's tool that allow us to automate some of the tests of our project.
	
	Steps:
		# Access CircleCI website (https://app.circleci.com/)
		# Enable it on the repository
		# Create the file config.yml inside of the folder .circleci

	** Travis-CI is descontinued and configuring CircleCI was kinda different.

Aula 21: Writing a simple unit test
	* The Django looks for files that the name begins with "tests" and uses them to run unit tests.

	* Steps to build a unit test file:
		# Import the Django Unit Test library:
			- from django.test import TestCase

		# Import the functions that you are gonna test:
			- from app.calc import add

		# Create a class to create the function tests inside of it
			- In this case we created the CalcTests(TestCase)
			* It's important to remember to extends the TestCase class!

		# Create your function/functions inside of the class and assert the output expected
			- Example:
				from django.test import TestCase
				from app.calc import add

				class CalcTests(TestCase):
				    def test_add_numbers(self):
				        """Testing that two number were added together correctly"""
				        self.assertEqual(add(3, 8), 11)

		# Run your test with the following command:
			- docker-compose run app sh -c "python manage.py test"

Aula 22: Writing a unit test with TDD
	* TDD consists in writing the tests before writing the code.
	* Then, write the test and after that write the code, like the subtraction function.

Aula 23: Create core app
	* The intention of the core app is to create a app to be the base of the rest of the sub apps that we create in our system.
	* Anything that is shared in one or more apps, like migrations etc.

	* Steps:
		- Create the app: docker-compose run app sh -c "python manage.py startapp core"
		- Exclude the tests.py file from the app created and create a folder named tests.
		- Exclude the views.py file because it won't be used in the core app.
		- Create a file named __init__.py inside of the tests folder.

Aula 24: Add tests for custom user model
	* Import the library test: from django.test import TestCase
	# In this case we are gonna be testing the Custom User Model
	* Create the class to test the Model extending the TestCase class: class ModelTests(TestCase):
	* Create the function to teste what you want and assert it to the expected output.

Aula 25: Implement custom user model
	* After implementing the test, we are gonna create out Custom User Model
	* 